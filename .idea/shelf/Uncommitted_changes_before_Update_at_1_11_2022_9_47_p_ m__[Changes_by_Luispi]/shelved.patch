Index: src/Exceptions/FormatIncorrect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Exceptions;\r\n\r\npublic class FormatIncorrect extends RuntimeException{\r\n\r\n    public FormatIncorrect(){\r\n        super(\"The format of the command is incorrect\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Exceptions/FormatIncorrect.java b/src/Exceptions/FormatIncorrect.java
--- a/src/Exceptions/FormatIncorrect.java	(revision 3ee8c985d8bbf099f0ae32b49c1fadc1c4aaaea1)
+++ b/src/Exceptions/FormatIncorrect.java	(date 1667354844400)
@@ -3,6 +3,6 @@
 public class FormatIncorrect extends RuntimeException{
 
     public FormatIncorrect(){
-        super("The format of the command is incorrect");
+        super("The format of the command is incorrect\n");
     }
 }
Index: src/Model/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Model;\r\n\r\nimport Exceptions.FormatIncorrect;\r\nimport Exceptions.IDused;\r\nimport Exceptions.NotFoundCountryID;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.internal.bind.util.ISO8601Utils;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\npublic class Controller {\r\n\r\n    private final String comandInsert = \"INSERT INTO\";\r\n    private final String comandSelect = \"SELECT * FROM\";\r\n    private final String comandDelete = \"DELETE FROM\";\r\n    private static ArrayList<Country> countries;\r\n    private static ArrayList<City> cities;\r\n\r\n    public Controller() {\r\n        countries = new ArrayList<>();\r\n        cities = new ArrayList<>();\r\n    }\r\n\r\n    public boolean addCountry(String command) throws FormatIncorrect, IDused {\r\n\r\n        if (command.startsWith(comandInsert + \" countries(id, name, population, countryCode) VALUES\")) {\r\n            String[] array = command.split(\"VALUES\");\r\n            String[] arrayValues = array[1].replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\", \"\").split(\",\");\r\n\r\n            if (arrayValues[0].startsWith(\" '\") && arrayValues[0].endsWith(\"'\") &&\r\n                    arrayValues[1].startsWith(\" '\") && arrayValues[1].endsWith(\"'\") &&\r\n                    arrayValues[3].startsWith(\" '\") && arrayValues[3].endsWith(\"'\")) {\r\n\r\n                try {\r\n                    int count = 0;\r\n                    for (int i = 0; i < countriesSize(); i++) {\r\n                        if (arrayValues[0].equals(countries.get(i).getId())) {\r\n                            count += 1;\r\n                        }\r\n                    }\r\n\r\n                    if (count == 0) {\r\n                        countries.add(new Country(\r\n                                arrayValues[0], arrayValues[1], Double.parseDouble(arrayValues[2]), arrayValues[3]\r\n                        ));\r\n\r\n                        FileOutputStream fos = new FileOutputStream(\"Countries.SQL\");\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(countries);\r\n                        fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                        fos.close();\r\n                    } else {\r\n                        throw new IDused();\r\n                    }\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            } else {\r\n                throw new FormatIncorrect();\r\n            }\r\n        } else {\r\n            throw new FormatIncorrect();\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    public boolean addCities(String command) throws NotFoundCountryID, FormatIncorrect {\r\n\r\n        if (command.startsWith(comandInsert + \" cities(id, name, countryID, population) VALUES\")) {\r\n            String[] array = command.split(\"VALUES\");\r\n            String[] arrayValues = array[1].replaceAll(\"\\\\(\", \"\").replaceAll(\"\\\\)\", \"\").split(\",\");\r\n\r\n            if (arrayValues[0].startsWith(\" '\") && arrayValues[0].endsWith(\"'\") &&\r\n                    arrayValues[1].startsWith(\" '\") && arrayValues[1].endsWith(\"'\") &&\r\n                    arrayValues[2].startsWith(\" '\") && arrayValues[2].endsWith(\"'\")\r\n            ) {\r\n\r\n                if (searchCountries(arrayValues[2], null, null) != null) {\r\n                    try {\r\n                        cities.add(new City(arrayValues[0], arrayValues[1], arrayValues[2], Double.parseDouble(arrayValues[3])));\r\n                        FileOutputStream fos = new FileOutputStream(\"Cities.SQL\");\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(cities);\r\n                        fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                        fos.close();\r\n                    } catch (IOException e) {\r\n                        System.out.println(\"1rata\");\r\n                    }\r\n                } else {\r\n                    throw new NotFoundCountryID();\r\n                }\r\n\r\n\r\n            } else {\r\n                throw new FormatIncorrect();\r\n            }\r\n\r\n\r\n        } else {\r\n            throw new FormatIncorrect();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public Country searchCountries(String id, String name, String countryCode) {\r\n\r\n        if (name != null) {\r\n            for (Country country : countries) {\r\n                if (country.getName().equals(name)) {\r\n                    return country;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (id != null) {\r\n            for (Country country : countries) {\r\n                if (country.getId().equals(id)) {\r\n                    return country;\r\n                }\r\n            }\r\n        }\r\n        if (countryCode != null) {\r\n            for (Country country : countries) {\r\n                if (country.getCountryCode().equals(countryCode)) {\r\n                    return country;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public City searchCities(String id, String name) {\r\n\r\n        if (name != null) {\r\n            for (City city : cities) {\r\n                if (city.getName().equals(name)) {\r\n                    return city;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (id != null) {\r\n            for (City city : cities) {\r\n                if (city.getId().equals(id)) {\r\n                    return city;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public void loadCities() throws IOException {\r\n        FileInputStream fis = new FileInputStream(\"Cities.SQL\");\r\n        BufferedReader reader = new BufferedReader(\r\n                new InputStreamReader(fis)\r\n        );\r\n\r\n        String json = \"\";\r\n        String line = \"\";\r\n        while ((line = reader.readLine()) != null) {\r\n            json += line;\r\n        }\r\n\r\n        Gson gson = new Gson();\r\n        City[] data = gson.fromJson(json, City[].class);\r\n        if (data != null) {\r\n            for (int i = 0; i < data.length; i++) {\r\n                cities.add(data[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void loadCountries() throws IOException {\r\n        FileInputStream fis = new FileInputStream(\"Countries.SQL\");\r\n        BufferedReader reader = new BufferedReader(\r\n                new InputStreamReader(fis)\r\n        );\r\n\r\n        String json = \"\";\r\n        String line = \"\";\r\n        while ((line = reader.readLine()) != null) {\r\n            json += line;\r\n        }\r\n\r\n        Gson gson = new Gson();\r\n        Country[] data = gson.fromJson(json, Country[].class);\r\n        if (data != null) {\r\n            for (int i = 0; i < data.length; i++) {\r\n                countries.add(data[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public int countriesSize() {\r\n        return countries.size();\r\n    }\r\n\r\n    public String showCountries() {\r\n        StringBuilder info = new StringBuilder();\r\n        for (Country country : countries) {\r\n            info.append(country.toString());\r\n        }\r\n\r\n        return info.toString();\r\n    }\r\n\r\n    public String showCities() {\r\n        StringBuilder info = new StringBuilder();\r\n        for (City city : cities) {\r\n            info.append(city.toString());\r\n        }\r\n\r\n        return info.toString();\r\n    }\r\n\r\n\r\n    private boolean isNumeric(String cadena) {\r\n        try {\r\n            cadena.trim();\r\n            System.out.println(cadena);\r\n            Integer.parseInt(cadena);\r\n            return true;\r\n        } catch (NumberFormatException nfe){\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    public String orderBy(String command) {\r\n        String info = \"\";\r\n        if (command.contains(\"<\") && command.contains(\"countries\")) {\r\n            String[] orderby = command.split(\"<\");\r\n            if (orderby[1].contains(\"ORDER BY name\")) {\r\n                String[] orderby2 = orderby[1].split(\" \");\r\n                ArrayList<Country> countryOrder = new ArrayList<>();\r\n                for (int i = 0; i < countries.size(); i++) {\r\n                    if (countries.get(i).getPopulation() < Integer.parseInt(orderby2[1])) {\r\n                        countryOrder.add(countries.get(i));\r\n                    }\r\n                }\r\n                Collections.sort(countryOrder, (a, b) -> {\r\n                    return a.getName().compareTo(b.getName());\r\n                });\r\n                for (int i = 0; i < countryOrder.size(); i++) {\r\n                    info += countryOrder.get(i).toString();\r\n                }\r\n                return info;\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (command.contains(\">\") && command.contains(\"countries\")) {\r\n            String[] orderby = command.split(\">\");\r\n            if (orderby[1].contains(\"ORDER BY name\")) {\r\n                String[] orderby2 = orderby[1].split(\" \");\r\n                ArrayList<Country> countryOrder = new ArrayList<>();\r\n                for (int i = 0; i < countries.size(); i++) {\r\n                    if (countries.get(i).getPopulation() > Integer.parseInt(orderby2[1])) {\r\n                        countryOrder.add(countries.get(i));\r\n                    }\r\n                }\r\n                Collections.sort(countryOrder, (a, b) -> {\r\n                    return a.getName().compareTo(b.getName());\r\n                });\r\n                for (int i = 0; i < countryOrder.size(); i++) {\r\n                    info += countryOrder.get(i).toString();\r\n                }\r\n                return info;\r\n\r\n            }\r\n        }\r\n\r\n        if (command.contains(\">\") && command.contains(\"cities\")) {\r\n            String[] orderby = command.split(\">\");\r\n            if (orderby[1].contains(\"ORDER BY name\")) {\r\n                String[] orderby2 = orderby[1].split(\" \");\r\n                ArrayList<City> cityOrder = new ArrayList<>();\r\n                for (int i = 0; i < cities.size(); i++) {\r\n                    if (cities.get(i).getPopulation() > Integer.parseInt(orderby2[1])) {\r\n                        cityOrder.add(cities.get(i));\r\n                    }\r\n                }\r\n                Collections.sort(cityOrder, (a, b) -> {\r\n                    return a.getName().compareTo(b.getName());\r\n                });\r\n                for (int i = 0; i < cityOrder.size(); i++) {\r\n                    info += cityOrder.get(i).toString();\r\n                }\r\n                return info;\r\n\r\n            }\r\n        }\r\n\r\n        if (command.contains(\"<\") && command.contains(\"cities\")) {\r\n            String[] orderby = command.split(\"<\");\r\n            if (orderby[1].contains(\"ORDER BY name\")) {\r\n                String[] orderby2 = orderby[1].split(\" \");\r\n                ArrayList<City> cityOrder = new ArrayList<>();\r\n                for (int i = 0; i < cities.size(); i++) {\r\n                    if (cities.get(i).getPopulation() < Integer.parseInt(orderby2[1])) {\r\n                        cityOrder.add(cities.get(i));\r\n                    }\r\n                }\r\n                Collections.sort(cityOrder, (a, b) -> {\r\n                    return a.getName().compareTo(b.getName());\r\n                });\r\n                for (int i = 0; i < cityOrder.size(); i++) {\r\n                    info += cityOrder.get(i).toString();\r\n                }\r\n                return info;\r\n\r\n            }\r\n        }\r\n\r\n        if (command.contains(\"=\")) {\r\n            String[] orderby = command.split(\"=\");\r\n            String[] orderby2 = orderby[1].split(\" \");\r\n            ArrayList<City> populationSort = new ArrayList<>();\r\n            if (orderby[1].contains(\"ORDER BY population\")) {\r\n                String filter = orderby2[1].replaceAll(\" \",\"\");\r\n                for (int i = 0; i < cities.size(); i++) {\r\n                    if(filter.equals(cities.get(i).getName().replaceAll(\" \",\"\"))){\r\n                        populationSort.add(cities.get(i));\r\n                    }\r\n                }\r\n                Collections.sort(populationSort,(a,b)->{\r\n                    if(a.getPopulation() < b.getPopulation()){\r\n                        return 1;\r\n                    }else{\r\n                        return -1;\r\n                    }\r\n                });\r\n                info += (\"\\nOrden de las ciudades por población:\\n\");\r\n                for (int i = 0; i < populationSort.size(); i++) {\r\n                    info += (populationSort.get(i).toString());\r\n                }\r\n                return info;\r\n            } else if ((orderby[1].contains(\"ORDER BY name\"))) {\r\n                String filter = orderby2[1].replaceAll(\" \", \"\");\r\n                for (int i = 0; i < cities.size(); i++) {\r\n                    if (filter.equals(cities.get(i).getName().replaceAll(\" \", \"\"))) {\r\n                        populationSort.add(cities.get(i));\r\n                    }\r\n                }\r\n                Collections.sort(populationSort, (a, b) -> {\r\n                    return a.getName().compareTo(b.getName());\r\n                });\r\n                info += (\"\\nOrden de las ciudades por nombre:\\n\");\r\n                for (int i = 0; i < populationSort.size(); i++) {\r\n                    info += (populationSort.get(i).toString());\r\n                }\r\n                return info;\r\n            }\r\n\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public void deletCityNoCountry(Country country) {\r\n        for (int i = cities.size() - 1; i > 0; i--) {\r\n            if (country.getId().equals(cities.get(i).getCountryID())) {\r\n                cities.remove(i);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public String select(String command) throws FormatIncorrect {\r\n\r\n        //\r\n        if (command.equals(comandSelect + \" countries\")) {\r\n            return showCountries();\r\n        } else if (command.equals(comandSelect + \" cities\")) {\r\n            return showCities();\r\n        }\r\n        //\r\n\r\n        if (command.startsWith(comandSelect + \" countries WHERE population\")) {\r\n            if (command.startsWith(comandSelect + \" countries WHERE population < \")) {\r\n\r\n                String[] countries1 = command.split(\"<\");\r\n                double pop = Double.parseDouble(countries1[1]);\r\n                return filter(pop, \"2\");\r\n\r\n            } else if (command.startsWith(comandSelect + \" countries WHERE population > \")){\r\n                String[] countries1 = command.split(\">\");\r\n                double pop = Double.parseDouble(countries1[1]);\r\n                return filter(pop,\"1\");\r\n\r\n            }else if(command.startsWith(comandSelect + \" countries WHERE population = \")){\r\n                String[] countries1 = command.split(\"=\");\r\n\r\n                double pop = Double.parseDouble(countries1[1]);\r\n                return filter(pop, \"=\");\r\n\r\n            }else {\r\n                throw new FormatIncorrect();\r\n            }\r\n        }else if(command.startsWith(comandSelect + \" cities WHERE population\")){\r\n            if (command.startsWith(comandSelect + \" cities WHERE population < \")){\r\n                String[] cities1 = command.split(\"<\");\r\n                double pop = Double.parseDouble(cities1[1]);\r\n                return filter2(pop, \"2\");\r\n\r\n            } else if (command.startsWith(comandSelect + \" cities WHERE population > \")){\r\n                String[] cities1 = command.split(\">\");\r\n                double pop = Double.parseDouble(cities1[1]);\r\n                return filter2(pop, \"1\");\r\n\r\n            } else if (command.startsWith(comandSelect + \" cities WHERE population = \")){\r\n                String[] cities1 = command.split(\"=\");\r\n\r\n                double pop = Double.parseDouble(cities1[1]);\r\n                return filter2(pop, \"=\");\r\n\r\n            } else {\r\n                throw new FormatIncorrect();\r\n            }\r\n        }\r\n\r\n        if (command.startsWith(comandSelect + \" countries WHERE name =\")){\r\n            String[] countries1 = command.split(\"=\");\r\n\r\n            if ((searchCountries(null, countries1[1], null)) != null){\r\n                String info = \"\";\r\n                for (int i = 0; i < countries.size(); i++) {\r\n                    if (countries1[1].equals(countries.get(i).getName())){\r\n                        info += countries.get(i).toString();\r\n                    }\r\n                }\r\n                return \"The country exists:\\n\" + info;\r\n            }\r\n        }else if(command.startsWith(comandSelect + \" cities WHERE name =\")){\r\n            String[] cities1 = command.split(\"=\");\r\n\r\n            if ((searchCities(null, cities1[1])) != null) {\r\n                String info = \"\";\r\n\r\n                for (int i = 0; i < cities.size(); i++) {\r\n                    if (cities1[1].equals(cities.get(i).getName())){\r\n                        info += cities.get(i).toString();\r\n                    }\r\n                }\r\n                return \"The city exists:\\n\" + info;\r\n            }\r\n        }\r\n\r\n        if (command.startsWith(comandSelect + \" countries WHERE countryCode =\")){\r\n            String[] countries1 = command.split(\"=\");\r\n\r\n            if ((searchCountries(null, null, countries1[1])) != null){\r\n                String info = \"\";\r\n\r\n                for (int i = 0; i < countries.size(); i++) {\r\n                    if (countries1[1].equals(countries.get(i).getCountryCode())){\r\n                        info += countries.get(i).toString();\r\n                    }\r\n                }\r\n                return \"The country exists:\\n\" + info;\r\n            }\r\n        }\r\n\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public String filter(double population,String minMax){\r\n\r\n        String info = \"\";\r\n        if (minMax.equals(\"1\")){\r\n            //Mayor\r\n            for (int i = 0; i < countries.size(); i++) {\r\n                if(countries.get(i).getPopulation() > population){\r\n                    info += countries.get(i).toString();\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"2\")){\r\n            //Menor\r\n            for (int i = 0; i < countries.size(); i++) {\r\n                if(countries.get(i).getPopulation() < population){\r\n                    info += countries.get(i).toString();\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"=\")) {\r\n            //Igual\r\n            for (int i = 0; i < countries.size(); i++) {\r\n                if(countries.get(i).getPopulation() == population){\r\n                    info += countries.get(i).toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    public String filter2(double population,String minMax){\r\n\r\n        String info = \"\";\r\n        if (minMax.equals(\"1\")){\r\n            //Mayor\r\n            for (int i = 0; i < cities.size(); i++) {\r\n                if(cities.get(i).getPopulation() > population){\r\n                    info += cities.get(i).toString();\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"2\")){\r\n            //Menor\r\n            for (int i = 0; i < cities.size(); i++) {\r\n                if(cities.get(i).getPopulation() < population){\r\n                    info += cities.get(i).toString();\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"=\")) {\r\n            //Igual\r\n            for (int i = 0; i < cities.size(); i++) {\r\n                if(cities.get(i).getPopulation() == population){\r\n                    info += cities.get(i).toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    public String delete(String command) throws FormatIncorrect, IOException {\r\n\r\n        //\r\n        if (command.equals(comandDelete + \" countries\")) {\r\n            String info = deleteCountries();\r\n\r\n            FileOutputStream fos = new FileOutputStream(\"Countries.SQL\");\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(countries);\r\n            fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n            fos.close();\r\n\r\n            return info;\r\n        } else if (command.equals(comandDelete + \" cities\")) {\r\n            String info = deleteCities();\r\n\r\n            FileOutputStream fos = new FileOutputStream(\"Cities.SQL\");\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(cities);\r\n            fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n            fos.close();\r\n\r\n            return info;\r\n        }\r\n        //\r\n\r\n        if (command.startsWith(comandDelete + \" countries WHERE population\")) {\r\n            if (command.startsWith(comandDelete + \" countries WHERE population < \")) {\r\n                String[] countries1 = command.split(\"<\");\r\n                double pop = Double.parseDouble(countries1[1]);\r\n                String info = findDelete(pop, \"2\");\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Countries.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(countries);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return info;\r\n\r\n            } else if (command.startsWith(comandDelete + \" countries WHERE population > \")) {\r\n                String[] countries1 = command.split(\">\");\r\n                double pop = Double.parseDouble(countries1[1]);\r\n                String info = findDelete(pop, \"1\");\r\n\r\n                for (int i = 0; i < countries.size(); i++) {\r\n                    System.out.println(countries.get(i).toString());\r\n                }\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Countries.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(countries);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return info;\r\n\r\n            }else if(command.startsWith(comandDelete + \" countries WHERE population = \")){\r\n                String[] countries1 = command.split(\"=\");\r\n\r\n                double pop = Double.parseDouble(countries1[1]);\r\n                String info = findDelete(pop, \"=\");\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Countries.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(countries);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return info;\r\n\r\n            }else {\r\n                throw new FormatIncorrect();\r\n            }\r\n        }else if (command.startsWith(comandDelete + \" cities WHERE population\")) {\r\n            if (command.startsWith(comandDelete + \" cities WHERE population < \")) {\r\n                String[] cities1 = command.split(\"<\");\r\n                double pop = Double.parseDouble(cities1[1]);\r\n                String info = findDelete2(pop, \"2\");\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Cities.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(cities);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return info;\r\n\r\n            } else if (command.startsWith(comandDelete + \" cities WHERE population > \")) {\r\n                String[] cities1 = command.split(\">\");\r\n                double pop = Double.parseDouble(cities1[1]);\r\n                String info = findDelete2(pop, \"1\");\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Cities.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(cities);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return info;\r\n\r\n            }else if(command.startsWith(comandDelete + \" cities WHERE population = \")){\r\n                String[] cities1 = command.split(\"=\");\r\n\r\n                double pop = Double.parseDouble(cities1[1]);\r\n                String info = findDelete2(pop, \"=\");\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Cities.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(cities);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return info;\r\n\r\n            }else {\r\n                throw new FormatIncorrect();\r\n            }\r\n        }\r\n\r\n        if (command.startsWith(comandDelete + \" countries WHERE name =\")) {\r\n            String[] countries1 = command.split(\"=\");\r\n\r\n            if ((searchCountries(null, countries1[1], null)) != null) {\r\n                String info = \"\";\r\n\r\n                for (int i = 0; i < countries.size(); i++) {\r\n                    if (countries1[1].equals(countries.get(i).getName())){\r\n                        countries.remove(i);\r\n                    }\r\n                }\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Countries.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(countries);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return \"Countries eliminated\";\r\n            }\r\n        }else if(command.startsWith(comandDelete + \" cities WHERE name =\")){\r\n            String[] cities1 = command.split(\"=\");\r\n\r\n            if ((searchCities(null, cities1[1])) != null) {\r\n                String info = \"\";\r\n\r\n                for (int i = 0; i < cities.size(); i++) {\r\n                    if (cities1[1].equals(cities.get(i).getName())){\r\n                        cities.remove(i);\r\n                    }\r\n                }\r\n\r\n                FileOutputStream fos = new FileOutputStream(\"Cities.SQL\");\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(cities);\r\n                fos.write(json.getBytes(StandardCharsets.UTF_8));\r\n                fos.close();\r\n\r\n                return \"Cities eliminated\";\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public void saveCities() throws IOException {\r\n        FileOutputStream fos2 = new FileOutputStream(\"Cities.SQL\");\r\n        Gson gson2 = new Gson();\r\n        String json2 = gson2.toJson(cities);\r\n        fos2.write(json2.getBytes(StandardCharsets.UTF_8));\r\n        fos2.close();\r\n    }\r\n\r\n    public String deleteCountries() {\r\n\r\n        String info = \"\";\r\n        for (int i = countries.size() - 1; i >= 0; i--) {\r\n\r\n            countries.remove(i);\r\n            info = \"Countries eliminated\";\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    public String deleteCities() {\r\n\r\n        String info = \"\";\r\n        for (int i = cities.size() - 1; i >= 0; i--){\r\n            cities.remove(i);\r\n            info = \"Cities eliminated\";\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    public String findDelete(double population,String minMax){\r\n\r\n        String info = \"\";\r\n        if (minMax.equals(\"1\")){\r\n            //Mayor\r\n            for (int i = countries.size() - 1; i >= 0; i--) {\r\n                if (countries.get(i).getPopulation() > population) {\r\n                    deletCityNoCountry(countries.get(i));\r\n                    countries.remove(i);\r\n                    info = \"Countries eliminated\";\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"2\")){\r\n            //Menor\r\n            for (int i = countries.size() - 1; i >= 0; i--) {\r\n                if(countries.get(i).getPopulation() < population){\r\n                    countries.remove(i);\r\n                    info = \"Countries eliminated\";\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"=\")) {\r\n            //Igual\r\n            for (int i = countries.size() - 1; i >= 0; i--) {\r\n                if(countries.get(i).getPopulation() == population){\r\n                    countries.remove(i);\r\n                    info = \"Countries eliminated\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n    public String findDelete2(double population,String minMax){\r\n\r\n        String info = \"\";\r\n        if (minMax.equals(\"1\")){\r\n            //Mayor\r\n            for (int i = cities.size()-1; i >= 0; i--) {\r\n                if(cities.get(i).getPopulation() > population){\r\n                    cities.remove(i);\r\n                    info = \"Cities eliminated\";\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"2\")){\r\n            //Menor\r\n            for (int i = cities.size() - 1; i >= 0; i--) {\r\n                if(cities.get(i).getPopulation() < population){\r\n                    cities.remove(i);\r\n                    info = \"Cities eliminated\";\r\n                }\r\n            }\r\n        }else if (minMax.equals(\"=\")) {\r\n            //Igual\r\n            for (int i = cities.size() - 1; i >= 0; i--) {\r\n                if(cities.get(i).getPopulation() == population){\r\n                    cities.remove(i);\r\n                    info = \"Cities eliminated\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model/Controller.java b/src/Model/Controller.java
--- a/src/Model/Controller.java	(revision 3ee8c985d8bbf099f0ae32b49c1fadc1c4aaaea1)
+++ b/src/Model/Controller.java	(date 1667357018675)
@@ -95,7 +95,6 @@
                     throw new NotFoundCountryID();
                 }
 
-
             } else {
                 throw new FormatIncorrect();
             }
@@ -228,7 +227,7 @@
             System.out.println(cadena);
             Integer.parseInt(cadena);
             return true;
-        } catch (NumberFormatException nfe){
+        } catch (NumberFormatException nfe) {
             return false;
         }
     }
@@ -327,16 +326,16 @@
             String[] orderby2 = orderby[1].split(" ");
             ArrayList<City> populationSort = new ArrayList<>();
             if (orderby[1].contains("ORDER BY population")) {
-                String filter = orderby2[1].replaceAll(" ","");
+                String filter = orderby2[1].replaceAll(" ", "");
                 for (int i = 0; i < cities.size(); i++) {
-                    if(filter.equals(cities.get(i).getName().replaceAll(" ",""))){
+                    if (filter.equals(cities.get(i).getName().replaceAll(" ", ""))) {
                         populationSort.add(cities.get(i));
                     }
                 }
-                Collections.sort(populationSort,(a,b)->{
-                    if(a.getPopulation() < b.getPopulation()){
+                Collections.sort(populationSort, (a, b) -> {
+                    if (a.getPopulation() < b.getPopulation()) {
                         return 1;
-                    }else{
+                    } else {
                         return -1;
                     }
                 });
@@ -375,7 +374,6 @@
     }
 
 
-
     public String select(String command) throws FormatIncorrect {
 
         //
@@ -393,32 +391,32 @@
                 double pop = Double.parseDouble(countries1[1]);
                 return filter(pop, "2");
 
-            } else if (command.startsWith(comandSelect + " countries WHERE population > ")){
+            } else if (command.startsWith(comandSelect + " countries WHERE population > ")) {
                 String[] countries1 = command.split(">");
                 double pop = Double.parseDouble(countries1[1]);
-                return filter(pop,"1");
+                return filter(pop, "1");
 
-            }else if(command.startsWith(comandSelect + " countries WHERE population = ")){
+            } else if (command.startsWith(comandSelect + " countries WHERE population = ")) {
                 String[] countries1 = command.split("=");
 
                 double pop = Double.parseDouble(countries1[1]);
                 return filter(pop, "=");
 
-            }else {
+            } else {
                 throw new FormatIncorrect();
             }
-        }else if(command.startsWith(comandSelect + " cities WHERE population")){
-            if (command.startsWith(comandSelect + " cities WHERE population < ")){
+        } else if (command.startsWith(comandSelect + " cities WHERE population")) {
+            if (command.startsWith(comandSelect + " cities WHERE population < ")) {
                 String[] cities1 = command.split("<");
                 double pop = Double.parseDouble(cities1[1]);
                 return filter2(pop, "2");
 
-            } else if (command.startsWith(comandSelect + " cities WHERE population > ")){
+            } else if (command.startsWith(comandSelect + " cities WHERE population > ")) {
                 String[] cities1 = command.split(">");
                 double pop = Double.parseDouble(cities1[1]);
                 return filter2(pop, "1");
 
-            } else if (command.startsWith(comandSelect + " cities WHERE population = ")){
+            } else if (command.startsWith(comandSelect + " cities WHERE population = ")) {
                 String[] cities1 = command.split("=");
 
                 double pop = Double.parseDouble(cities1[1]);
@@ -429,26 +427,26 @@
             }
         }
 
-        if (command.startsWith(comandSelect + " countries WHERE name =")){
+        if (command.startsWith(comandSelect + " countries WHERE name =")) {
             String[] countries1 = command.split("=");
 
-            if ((searchCountries(null, countries1[1], null)) != null){
+            if ((searchCountries(null, countries1[1], null)) != null) {
                 String info = "";
                 for (int i = 0; i < countries.size(); i++) {
-                    if (countries1[1].equals(countries.get(i).getName())){
+                    if (countries1[1].equals(countries.get(i).getName())) {
                         info += countries.get(i).toString();
                     }
                 }
                 return "The country exists:\n" + info;
             }
-        }else if(command.startsWith(comandSelect + " cities WHERE name =")){
+        } else if (command.startsWith(comandSelect + " cities WHERE name =")) {
             String[] cities1 = command.split("=");
 
             if ((searchCities(null, cities1[1])) != null) {
                 String info = "";
 
                 for (int i = 0; i < cities.size(); i++) {
-                    if (cities1[1].equals(cities.get(i).getName())){
+                    if (cities1[1].equals(cities.get(i).getName())) {
                         info += cities.get(i).toString();
                     }
                 }
@@ -456,14 +454,14 @@
             }
         }
 
-        if (command.startsWith(comandSelect + " countries WHERE countryCode =")){
+        if (command.startsWith(comandSelect + " countries WHERE countryCode =")) {
             String[] countries1 = command.split("=");
 
-            if ((searchCountries(null, null, countries1[1])) != null){
+            if ((searchCountries(null, null, countries1[1])) != null) {
                 String info = "";
 
                 for (int i = 0; i < countries.size(); i++) {
-                    if (countries1[1].equals(countries.get(i).getCountryCode())){
+                    if (countries1[1].equals(countries.get(i).getCountryCode())) {
                         info += countries.get(i).toString();
                     }
                 }
@@ -475,27 +473,27 @@
         return "";
     }
 
-    public String filter(double population,String minMax){
+    public String filter(double population, String minMax) {
 
         String info = "";
-        if (minMax.equals("1")){
+        if (minMax.equals("1")) {
             //Mayor
             for (int i = 0; i < countries.size(); i++) {
-                if(countries.get(i).getPopulation() > population){
+                if (countries.get(i).getPopulation() > population) {
                     info += countries.get(i).toString();
                 }
             }
-        }else if (minMax.equals("2")){
+        } else if (minMax.equals("2")) {
             //Menor
             for (int i = 0; i < countries.size(); i++) {
-                if(countries.get(i).getPopulation() < population){
+                if (countries.get(i).getPopulation() < population) {
                     info += countries.get(i).toString();
                 }
             }
-        }else if (minMax.equals("=")) {
+        } else if (minMax.equals("=")) {
             //Igual
             for (int i = 0; i < countries.size(); i++) {
-                if(countries.get(i).getPopulation() == population){
+                if (countries.get(i).getPopulation() == population) {
                     info += countries.get(i).toString();
                 }
             }
@@ -504,27 +502,27 @@
         return info;
     }
 
-    public String filter2(double population,String minMax){
+    public String filter2(double population, String minMax) {
 
         String info = "";
-        if (minMax.equals("1")){
+        if (minMax.equals("1")) {
             //Mayor
             for (int i = 0; i < cities.size(); i++) {
-                if(cities.get(i).getPopulation() > population){
+                if (cities.get(i).getPopulation() > population) {
                     info += cities.get(i).toString();
                 }
             }
-        }else if (minMax.equals("2")){
+        } else if (minMax.equals("2")) {
             //Menor
             for (int i = 0; i < cities.size(); i++) {
-                if(cities.get(i).getPopulation() < population){
+                if (cities.get(i).getPopulation() < population) {
                     info += cities.get(i).toString();
                 }
             }
-        }else if (minMax.equals("=")) {
+        } else if (minMax.equals("=")) {
             //Igual
             for (int i = 0; i < cities.size(); i++) {
-                if(cities.get(i).getPopulation() == population){
+                if (cities.get(i).getPopulation() == population) {
                     info += cities.get(i).toString();
                 }
             }
@@ -590,7 +588,7 @@
 
                 return info;
 
-            }else if(command.startsWith(comandDelete + " countries WHERE population = ")){
+            } else if (command.startsWith(comandDelete + " countries WHERE population = ")) {
                 String[] countries1 = command.split("=");
 
                 double pop = Double.parseDouble(countries1[1]);
@@ -604,10 +602,10 @@
 
                 return info;
 
-            }else {
+            } else {
                 throw new FormatIncorrect();
             }
-        }else if (command.startsWith(comandDelete + " cities WHERE population")) {
+        } else if (command.startsWith(comandDelete + " cities WHERE population")) {
             if (command.startsWith(comandDelete + " cities WHERE population < ")) {
                 String[] cities1 = command.split("<");
                 double pop = Double.parseDouble(cities1[1]);
@@ -634,7 +632,7 @@
 
                 return info;
 
-            }else if(command.startsWith(comandDelete + " cities WHERE population = ")){
+            } else if (command.startsWith(comandDelete + " cities WHERE population = ")) {
                 String[] cities1 = command.split("=");
 
                 double pop = Double.parseDouble(cities1[1]);
@@ -648,7 +646,7 @@
 
                 return info;
 
-            }else {
+            } else {
                 throw new FormatIncorrect();
             }
         }
@@ -660,7 +658,7 @@
                 String info = "";
 
                 for (int i = 0; i < countries.size(); i++) {
-                    if (countries1[1].equals(countries.get(i).getName())){
+                    if (countries1[1].equals(countries.get(i).getName())) {
                         countries.remove(i);
                     }
                 }
@@ -673,14 +671,14 @@
 
                 return "Countries eliminated";
             }
-        }else if(command.startsWith(comandDelete + " cities WHERE name =")){
+        } else if (command.startsWith(comandDelete + " cities WHERE name =")) {
             String[] cities1 = command.split("=");
 
             if ((searchCities(null, cities1[1])) != null) {
                 String info = "";
 
                 for (int i = 0; i < cities.size(); i++) {
-                    if (cities1[1].equals(cities.get(i).getName())){
+                    if (cities1[1].equals(cities.get(i).getName())) {
                         cities.remove(i);
                     }
                 }
@@ -721,7 +719,7 @@
     public String deleteCities() {
 
         String info = "";
-        for (int i = cities.size() - 1; i >= 0; i--){
+        for (int i = cities.size() - 1; i >= 0; i--) {
             cities.remove(i);
             info = "Cities eliminated";
         }
@@ -729,10 +727,10 @@
         return info;
     }
 
-    public String findDelete(double population,String minMax){
+    public String findDelete(double population, String minMax) {
 
         String info = "";
-        if (minMax.equals("1")){
+        if (minMax.equals("1")) {
             //Mayor
             for (int i = countries.size() - 1; i >= 0; i--) {
                 if (countries.get(i).getPopulation() > population) {
@@ -741,7 +739,7 @@
                     info = "Countries eliminated";
                 }
             }
-        }else if (minMax.equals("2")){
+        } else if (minMax.equals("2")) {
             //Menor
             for (int i = countries.size() - 1; i >= 0; i--) {
                 if(countries.get(i).getPopulation() < population){
@@ -749,7 +747,7 @@
                     info = "Countries eliminated";
                 }
             }
-        }else if (minMax.equals("=")) {
+        } else if (minMax.equals("=")) {
             //Igual
             for (int i = countries.size() - 1; i >= 0; i--) {
                 if(countries.get(i).getPopulation() == population){
@@ -762,29 +760,29 @@
         return info;
     }
 
-    public String findDelete2(double population,String minMax){
+    public String findDelete2(double population, String minMax) {
 
         String info = "";
-        if (minMax.equals("1")){
+        if (minMax.equals("1")) {
             //Mayor
-            for (int i = cities.size()-1; i >= 0; i--) {
-                if(cities.get(i).getPopulation() > population){
+            for (int i = cities.size() - 1; i >= 0; i--) {
+                if (cities.get(i).getPopulation() > population) {
                     cities.remove(i);
                     info = "Cities eliminated";
                 }
             }
-        }else if (minMax.equals("2")){
+        } else if (minMax.equals("2")) {
             //Menor
             for (int i = cities.size() - 1; i >= 0; i--) {
-                if(cities.get(i).getPopulation() < population){
+                if (cities.get(i).getPopulation() < population) {
                     cities.remove(i);
                     info = "Cities eliminated";
                 }
             }
-        }else if (minMax.equals("=")) {
+        } else if (minMax.equals("=")) {
             //Igual
             for (int i = cities.size() - 1; i >= 0; i--) {
-                if(cities.get(i).getPopulation() == population){
+                if (cities.get(i).getPopulation() == population) {
                     cities.remove(i);
                     info = "Cities eliminated";
                 }
Index: src/UI/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package UI;\r\n\r\nimport Exceptions.FormatIncorrect;\r\nimport Exceptions.IDused;\r\nimport Exceptions.NotFoundCountryID;\r\nimport Model.Controller;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\npublic class Main {\r\n\r\n    public static Controller controller;\r\n    public static Scanner reader;\r\n\r\n\r\n    public static void main(String[] args) {\r\n\r\n        menu();\r\n        int exit = 0;\r\n\r\n        while (exit == 0) {\r\n            System.out.println(\"1. Insert Comand\\n2. Import data from file .SQL\\n3. Exit\");\r\n            int menu = reader.nextInt();\r\n\r\n            switch (menu) {\r\n\r\n                case 1:\r\n                    insertCommand();\r\n                    break;\r\n                case 2:\r\n\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"Thanks for using this program\uD83D\uDDFA️\");\r\n                    exit++;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Please choose a valid option!\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static void menu() {\r\n        String menu = (\"\"\"\r\n                                / |  / | -------------------------------\r\n                                | |__| |                               |\r\n                               /   O O\\\\__  Welcome to the geographic   |\r\n                              /          \\\\   information system        |\r\n                             /      \\\\     \\\\                            |\r\n                            /   _    \\\\     \\\\ ---------------------------\r\n                           /    |\\\\____\\\\     \\\\      ||\r\n                          /     | | | |\\\\____/      ||\r\n                         /       \\\\| | | |/ |     __||\r\n                        /  /  \\\\   -------  |_____| ||\r\n                       /   |   |           |       --|\r\n                       |   |   |           |_____  --|\r\n                       |  |_|_|_|          |     \\\\----\r\n                       /\\\\                  |\r\n                      / /\\\\        |        /\r\n                     / /  |       |       |\r\n                 ___/ /   |       |       |\r\n                |____/    c_c_c_C/ \\\\C_c_c_c\"\"\");\r\n        System.out.println(menu);\r\n        reader = new Scanner(System.in);\r\n        controller = new Controller();\r\n        try {\r\n            controller.loadCountries();\r\n            controller.loadCities();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public static void insertCommand() {\r\n        System.out.println(\"Please insert the command\\n\");\r\n        String command = reader.nextLine();\r\n        command = reader.nextLine();\r\n\r\n        if (command.startsWith(\"INSERT INTO countries(id, name, population, countryCode) VALUES\")) {\r\n\r\n            if(!proveUUID(command)){\r\n                System.out.println(\"The uuid format is incorrect!\\n\");\r\n            }else{\r\n                try {\r\n                    controller.addCountry(command);\r\n                    System.out.println(controller.showCountries());\r\n                } catch (FormatIncorrect | IDused e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n        } else if (command.startsWith(\"INSERT INTO cities(id, name, countryID, population) VALUES\")) {\r\n\r\n            try {\r\n                controller.addCities(command);\r\n            } catch (NotFoundCountryID | FormatIncorrect e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n        } else if (command.contains(\"ORDER BY\")) {\r\n            System.out.println(controller.orderBy(command));\r\n\r\n        } else if (command.startsWith(\"SELECT * FROM countries\")) {\r\n\r\n            try {\r\n                if (!controller.select(command).equals(\"\")) {\r\n                    System.out.println(controller.select(command));\r\n                } else {\r\n                    System.out.println(\"There are no countries with those specifications\");\r\n                }\r\n            } catch (FormatIncorrect e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n        } else if (command.startsWith(\"SELECT * FROM cities\")) {\r\n\r\n            try {\r\n                if (!controller.select(command).equals(\"\")) {\r\n                    System.out.println(controller.select(command));\r\n                } else {\r\n                    System.out.println(\"There are no cities with those specifications\");\r\n                }\r\n            } catch (FormatIncorrect e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n        } else if (command.startsWith(\"DELETE FROM countries\")) {\r\n\r\n            try {\r\n                String info = controller.delete(command);\r\n                if (!info.equals(\"\")) {\r\n                    System.out.println(info);\r\n                } else {\r\n                    System.out.println(\"There are no countries with those specifications\");\r\n                }\r\n\r\n            } catch (FormatIncorrect | IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else if (command.startsWith(\"DELETE FROM cities\")) {\r\n\r\n            try {\r\n                String info = controller.delete(command);\r\n                if (!info.equals(\"\")) {\r\n                    System.out.println(info);\r\n                } else {\r\n                    System.out.println(\"There are no cities with those specifications\");\r\n                }\r\n\r\n            } catch (FormatIncorrect | IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        } else {\r\n\r\n            System.out.println(\"The command that you inserted doesn't exist!\");\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public static boolean proveUUID(String command) {\r\n        int count = 0;\r\n        String[] commandSplit = command.split(\"VALUES\");\r\n        String[] commandSplit2 = commandSplit[1].split(\",\");\r\n        char[] uuidCommand = commandSplit2[0].replaceAll(\"\\\\(\", \"\").replaceAll(\" \", \"\").toCharArray();\r\n        String a = commandSplit2[0].replaceAll(\"\\\\(\", \"\").replaceAll(\" \", \"\");\r\n        String[] commandSplit3 = a.split(\"'\");\r\n        String commandSplit4 = commandSplit3[1].replaceAll(\"-\", \"\");\r\n\r\n        for (int i = 0; i < uuidCommand.length; i++) {\r\n            if (uuidCommand[i] == '-') {\r\n                count++;\r\n            }\r\n        }\r\n        if (count != 4 || commandSplit4.length() != 32) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UI/Main.java b/src/UI/Main.java
--- a/src/UI/Main.java	(revision 3ee8c985d8bbf099f0ae32b49c1fadc1c4aaaea1)
+++ b/src/UI/Main.java	(date 1667357122307)
@@ -18,7 +18,12 @@
         int exit = 0;
 
         while (exit == 0) {
-            System.out.println("1. Insert Comand\n2. Import data from file .SQL\n3. Exit");
+            System.out.println("""
+                   *********************************
+                   *1. Insert Comand               *
+                   *2. Import data from file .SQL  *
+                   *3. Exit                        *
+                   *********************************""");
             int menu = reader.nextInt();
 
             switch (menu) {
@@ -30,11 +35,11 @@
 
                     break;
                 case 3:
-                    System.out.println("Thanks for using this program🗺️");
+                    System.out.println("\nThanks for using this program🗺️");
                     exit++;
                     break;
                 default:
-                    System.out.println("Please choose a valid option!");
+                    System.out.println("\nPlease choose a valid option!");
             }
         }
 
@@ -95,8 +100,8 @@
 
             try {
                 controller.addCities(command);
-            } catch (NotFoundCountryID | FormatIncorrect e) {
-                throw new RuntimeException(e);
+            } catch (NotFoundCountryID | FormatIncorrect | IDused e) {
+              e.printStackTrace();
             }
 
         } else if (command.contains("ORDER BY")) {
@@ -111,7 +116,7 @@
                     System.out.println("There are no countries with those specifications");
                 }
             } catch (FormatIncorrect e) {
-                throw new RuntimeException(e);
+                e.printStackTrace();
             }
 
         } else if (command.startsWith("SELECT * FROM cities")) {
@@ -123,7 +128,7 @@
                     System.out.println("There are no cities with those specifications");
                 }
             } catch (FormatIncorrect e) {
-                throw new RuntimeException(e);
+                e.printStackTrace();
             }
 
         } else if (command.startsWith("DELETE FROM countries")) {
@@ -150,7 +155,7 @@
                 }
 
             } catch (FormatIncorrect | IOException e) {
-                throw new RuntimeException(e);
+                e.printStackTrace();
             }
         } else {
 
